## ams_version=1.0

Model Main_AddressBook {
    Section Do_It_Yourself_Form {
        Procedure Initialize {
            Body: {
                !UnregisterAllOurDataChangeMonitors();
                InitializeAddressBook();
                !RegisterDataChangeMonitors();
                
                SetupPersonForm;
                
                initializeAllPublicIdentifiersProcedure := StringToElement(AllIdentifiers, "webui_runtime::InitializeAllPublicIdentifiers");
                if (initializeAllPublicIdentifiersProcedure) then
                	me::Compile(initializeAllPublicIdentifiersProcedure);
                	Apply(initializeAllPublicIdentifiersProcedure);
                endif ;
            }
            ElementParameter initializeAllPublicIdentifiersProcedure {
                Range: AllProcedures;
                Default: 'webui::NoOp';
            }
        }
        Parameter Foo;
        ElementParameter theSelectedPerson {
            Range: Persons;
            Definition: {
                first(p | SelectedPersons(p));
            }
        }
        Set Persons {
            Index: p;
        }
        Parameter SelectedPersons {
            IndexDomain: p;
            Default: -1;
        }
        StringParameter PersonName {
            IndexDomain: p;
        }
        StringParameter PhoneNumbers {
            IndexDomain: p;
        }
        StringParameter PhoneNumbers_flags {
            Definition: "readonly";
        }
        Parameter PersonAge {
            IndexDomain: p;
        }
        DeclarationSection Form_Data {
            ElementParameter Form_Person {
                Range: Persons;
            }
            StringParameter Form_PersonName_annotations;
            StringParameter Form_PersonName {
                Default: "form-no-person-selected";
            }
            StringParameter Form_PhoneNumber_annotations;
            StringParameter Form_PhoneNumber {
                Default: "form-no-person-selected";
            }
        }
        DeclarationSection Form_State {
            Parameter IsPersonSelected {
                Definition: 1 onlyif exists[ p | SelectedPersons(p) ];
            }
            Parameter IsNewPerson;
            Parameter IsDirty {
                Default: 0;
            }
            Parameter IsValid;
            Parameter IsCompleted {
                Definition: (Form_PersonName <> "form-enter-name" ) and ( Form_PhoneNumber <> "form-enter-phonenumber" );
            }
        }
        Section Form_Validation {
            Procedure ValidateForm {
                Body: {
                    ValidNameLength := 1 onlyif ( StringLength(Form_PersonName) >= 2 );
                    NameAlreadyExists := 1 onlyif StringToElement(Persons, Form_PersonName) and (FormatString("%e", Form_Person) <> Form_PersonName);
                    
                    Form_PersonName_annotations := "validation-error-min-length" onlyif ( not ValidNameLength );
                    Form_PersonName_annotations += " validation-error-name-already-exists" onlyif NameAlreadyExists;
                    
                    
                    ValidPhoneNumber := 1 onlyif ( StringLength(Form_PhoneNumber) >= 10 );
                    
                    Form_PhoneNumber_annotations := "validation-error-not-a-valid-phonenumber" onlyif ( not ValidPhoneNumber );
                    
                    IsValid := 1 onlyif ( ValidNameLength and ValidPhoneNumber and not NameAlreadyExists);
                }
                Parameter NameAlreadyExists;
                Parameter ValidNameLength;
                Parameter ValidPhoneNumber;
            }
            Procedure HandleFormDataChange {
                Body: {
                    Display "HandleFormDataChange";
                    MarkFormAsDirty;
                    ValidateForm;
                }
            }
        }
        Section AddressBook_Operations {
            Procedure UpdatePerson {
                Arguments: (aPerson,personName,phoneNumber);
                Body: {
                    if ( not StringToElement(Persons, personName) or FormatString("%e", aPerson) = personName ) then
                    	SetElementRename(Persons, aPerson, personName);
                    	PhoneNumbers(aPerson) := phoneNumber;
                    else
                    	raise error "Person with that name already exists!";
                    endif ;
                }
                ElementParameter aPerson {
                    Range: Persons;
                    Property: Input;
                }
                StringParameter personName {
                    Property: Optional;
                }
                StringParameter phoneNumber {
                    Property: Optional;
                }
            }
            Procedure AddPerson {
                Arguments: (personName,aPerson);
                Body: {
                    if ( not StringToElement(Persons, personName) ) then
                    	SetElementAdd(Persons, aPerson, personName);
                    	SelectedPersons(aPerson) := 0;
                    else
                    	raise error "Person with that name already exists!";
                    endif ;
                }
                StringParameter personName {
                    Property: Input;
                }
                ElementParameter aPerson {
                    Range: Persons;
                    Property: Output;
                }
            }
            Procedure InitializeAddressBook {
                Body: {
                    
                    Persons := data { Raymond, Marcel };
                    PersonName(p) := FormatString("%e",p);
                    SelectedPersons(p) := data { Raymond : 0,  Marcel : 0 };
                    PhoneNumbers(p) := data { Raymond : "+31620340347",  Marcel : "+31624273820" };
                    PersonAge(p) := 1;
                    
                    empty Form_Data;
                    IsDirty := 0;
                    IsNewPerson := 0;
                }
            }
            Procedure NewPerson {
                Body: {
                    if IsDirty then
                    	dialogActions := {'apply-and-continue','discard-and-continue','cancel'};
                    	if (not isValid) then
                    		dialogActions -= 'apply-and-continue';
                    	endif;
                    	webui::requestPerformWebUIDialog("person-form-dirty-title", "person-form-dirty-message", dialogActions, 'HandleFormIsDirtyDialogResultFromNewPerson');
                    else
                    	IsNewPerson := 1;
                    	SelectedPersons(p) := 0;
                    	DataChangeMonitorReset(FormatString("%e", selectedPersonsMonitor), selectedPersonsIdentifier);
                    	UpdateFormWithSelectedPersonInfo;
                    endif;
                }
                Set dialogActions {
                    OrderBy: user;
                }
            }
            Procedure DeletePerson {
                Body: {
                    if (theSelectedPerson) then
                    	dialogActions := {'yes','no'};
                    	webui::requestPerformWebUIDialog("delete-confirmation-title", "delete-confirmation-message", dialogActions, 'HandleDeletePersonDialogResult');
                    endif;
                }
                Set dialogActions {
                    OrderBy: user;
                }
            }
            Procedure SaveChanges {
                Body: {
                    if IsDirty and IsCompleted then
                    	SaveChangesWithoutUpdatingSelection();
                    	SelectedPersons(Form_Person) := 1;
                    endif;
                }
            }
            Procedure SaveChangesWithoutUpdatingSelection {
                Body: {
                    if (not IsValid) then
                    	dialogActions := {'ok'};
                    	webui::requestPerformWebUIDialog("person-form-not-valid-title", "person-form-not-valid-message", dialogActions, '');
                    else
                    
                    	if ( not Form_Person ) then
                    		AddPerson(Form_PersonName, Form_Person);
                    	endif ;
                    
                    	UpdatePerson(Form_Person, personName: Form_PersonName, phoneNumber: Form_PhoneNumber);
                    
                    	IsDirty := 0;
                    	IsNewPerson := 0;
                    endif;
                }
                Set dialogActions {
                    OrderBy: user;
                }
            }
        }
        Section DataChangeMonitor_Declarations {
            Set AllMonitorsRegisteredByUs {
                SubsetOf: webui::RegisteredDataChangeMonitors;
            }
            Set formIdentifiers {
                SubsetOf: AllIdentifiers;
                Definition: {
                    Data { 'Form_PersonName', 'Form_PhoneNumber' };
                }
            }
            ElementParameter formMonitor {
                Range: webui::RegisteredDataChangeMonitors;
            }
            Set selectedPersonsIdentifier {
                SubsetOf: AllIdentifiers;
                Definition: {
                    Data { 'SelectedPersons' };
                }
            }
            ElementParameter selectedPersonsMonitor {
                Range: webui::RegisteredDataChangeMonitors;
            }
            Procedure RegisterDataChangeMonitors {
                Body: {
                    monitoredIdentifiers := { 'SelectedPersons' };
                    webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'HandleSelectedPersonsChange', selectedPersonsMonitor);
                    
                    AllMonitorsRegisteredByUs += selectedPersonsMonitor;
                    
                    monitoredIdentifiers := { 'Form_PersonName', 'Form_PhoneNumber' };
                    webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'HandleFormDataChange', formMonitor);
                    
                    AllMonitorsRegisteredByUs += formMonitor;
                }
                ElementParameter aMonitor {
                    Range: webui::RegisteredDataChangeMonitors;
                }
                ElementParameter aCallbackProcedure {
                    Range: AllProcedures;
                    Default: 'webui::NoOp';
                }
                Set monitoredIdentifiers {
                    SubsetOf: AllIdentifiers;
                }
            }
            Procedure UnregisterAllOurDataChangeMonitors {
                Body: {
                    
                                    ! PRO MEMORI: This does not work because of the super set of allOurMonitors gets updated as
                                    !             we unregister stuff:
                    
                                    !for (allOurMonitors) do
                                    !    webui::DataChangeMonitorUnregisterCallback(allOurMonitors);
                                    !endfor;
                    
                                    while Card(AllMonitorsRegisteredByUs) > 0 do
                                       webui::DataChangeMonitorUnregisterCallback(First(AllMonitorsRegisteredByUs));
                                    endwhile;
                }
            }
            Procedure MarkFormAsDirty {
                Body: {
                    IsDirty := 1;
                }
            }
            Procedure HandleSelectedPersonsChange {
                Body: {
                    Display "HandleSelectedPersonsChange", IsNewPerson;
                    
                    if IsDirty then
                    	! Prevents double dialog requests caused by the single select's unselect (which is also a datachange)
                    	! @TODO remove if when requestSetValues is implemented.
                    	if (theSelectedPerson and theSelectedPerson <> Form_Person) then
                    		dialogActions := {'apply-and-continue','discard-and-continue','cancel'};
                    		if (not isValid) then
                    			dialogActions -= 'apply-and-continue';
                    		endif;
                    		webui::requestPerformWebUIDialog("person-form-dirty-title", "person-form-dirty-message", dialogActions, 'HandleFormIsDirtyDialogResult');
                    	endif;!elseif ( not IsNewPerson ) then
                    else
                    	IsNewPerson := 0;
                    	UpdateFormWithSelectedPersonInfo;
                    endif;
                }
                Set monitoredIdentifiers {
                    SubsetOf: AllIdentifiers;
                }
                Set dialogActions {
                    OrderBy: user;
                }
            }
            Procedure HandleFormIsDirtyDialogResult {
                Arguments: (selectedAction);
                Body: {
                    selectedAction :=  webui::FormDialogHandlerOnDone; !('HandleFormIsDirtyDialogResult');
                    
                    Display "HandleFormIsDirtyDialogResult", selectedAction;
                    DialogMessage("Handling dialog result");
                    
                    if ( selectedAction = "apply-and-continue" ) then
                    	SaveChanges;
                    	UpdateFormWithSelectedPersonInfo;
                    elseif ( selectedAction = "discard-and-continue" ) then
                    	IsNewPerson := 0;
                    	UpdateFormWithSelectedPersonInfo;
                    elseif ( selectedAction = "cancel" ) then
                    	SelectedPersons(p) := 0;
                    	SelectedPersons(Form_Person) := 1;
                    else
                    	raise error "Unsupported action";
                    endif;
                }
                StringParameter selectedAction {
                    Property: Input;
                }
            }
            Procedure HandleDeletePersonDialogResult {
                Arguments: (selectedAction);
                Body: {
                    Display "HandleDeletePersonDialogResult", selectedAction;
                    
                    if ( selectedAction = "yes" ) then
                    	empty PhoneNumbers(theSelectedPerson);
                    	empty SelectedPersons(theSelectedPerson);
                    	Persons -= theSelectedPerson;
                    	IsNewPerson := 0;
                    	UpdateFormWithSelectedPersonInfo;
                    elseif ( selectedAction = "no" ) then
                    	! do nothing
                    else
                    	raise error "Unsupported action";
                    endif;
                }
                StringParameter selectedAction {
                    Property: Input;
                }
            }
            Procedure HandleFormIsDirtyDialogResultFromNewPerson {
                Arguments: (selectedAction);
                Body: {
                    Display "HandleFormIsDirtyDialogResult2", selectedAction;
                    
                    if ( selectedAction = "apply-and-continue" ) then
                    	SaveChanges;
                    	IsNewPerson := 1;
                    	SelectedPersons(p) := 0;
                    	DataChangeMonitorReset(FormatString("%e", selectedPersonsMonitor), selectedPersonsIdentifier);
                    	UpdateFormWithSelectedPersonInfo;
                    elseif ( selectedAction = "discard-and-continue" ) then
                    	IsNewPerson := 1;
                    	SelectedPersons(p) := 0;
                    	DataChangeMonitorReset(FormatString("%e", selectedPersonsMonitor), selectedPersonsIdentifier);
                    	UpdateFormWithSelectedPersonInfo;
                    elseif ( selectedAction = "cancel" ) then
                    	! do nothing
                    else
                    	raise error "Unsupported action";
                    endif;
                }
                StringParameter selectedAction {
                    Property: Input;
                }
            }
            Procedure UpdateFormWithSelectedPersonInfo {
                Body: {
                    Display "UpdateFormWithSelectedPersonInfo", IsNewPerson;
                    
                    Form_Person := theSelectedPerson;
                    if ( IsNewPerson ) then
                    	Form_PersonName := "form-enter-name";
                    	Form_PhoneNumber := "form-enter-phonenumber";
                    elseif ( not Form_Person ) then
                    	empty Form_Data;
                    else
                    	Form_PersonName := FormatString("%e", Form_Person);
                    	Form_PhoneNumber := PhoneNumbers(Form_Person);
                    endif;
                    
                    empty Form_PersonName_annotations;
                    empty Form_PhoneNumber_annotations;
                    
                    !webui::DataChangeMonitorReset(formMonitor); @TODO
                    DataChangeMonitorReset(FormatString("%e", formMonitor), formIdentifiers);
                    IsDirty := 0;
                }
            }
        }
        Procedure MainInitialization;
        Procedure MainExecution;
        Procedure MainTermination {
            Body: {
                return DataManagementExit();
            }
        }
    }
    Section Using_WebUI_Form_Support {
        Procedure SetupPersonForm {
            Body: {
                FormFields := { 'PersonName', 'PhoneNumbers', 'PersonAge' };
                
                webui::SetupForm("myform",'SelectedPersons',FormFields,'MyValidateForm','CreateNewPerson');
            }
            Set FormFields {
                SubsetOf: AllIdentifiers;
                Index: ff;
            }
            StringParameter NewPersonValue {
                IndexDomain: ff;
            }
        }
        Procedure MyValidateForm {
            Arguments: (formData,validationErrors);
            Body: {
                !DialogMessage("MyValidateForm");
                
                if ( not exists[ p | SelectedPersons(p) ] ) then
                	if ( StringToElement(Persons, formData('PersonName')) ) then
                		validationErrors('PersonName') := "validation-error-name-already-exists";
                	endif;
                endif;
                
                if (StringLength(formData('PersonName')) < 2) then
                    validationErrors('PersonName') := "validation-error-min-length";
                endif;
                
                if (formData('PersonName') = "form-enter-PersonName" ) then
                    validationErrors('PersonName') := "validation-error-required-field";
                endif;
                
                if (StringLength(formData('PhoneNumbers')) < 4) then
                    validationErrors('PhoneNumbers') := "validation-error-not-a-valid-phonenumber";
                endif;
                
                block
                	Age := Val(formData('PersonAge'));
                	if ( ( Age < 0 ) or ( Age > 150 ) ) then
                		validationErrors('PersonAge') := "validation-error-not-a-valid-age";
                	endif;
                onerror err do
                	validationErrors('PersonAge') := "validation-error-not-a-valid-age";
                	errh::MarkAsHandled(err);
                endblock;
                
                
                if (formData('PhoneNumbers') = "form-enter-PhoneNumbers" ) then
                    validationErrors('PhoneNumbers') := "validation-error-required-field";
                endif;
            }
            Parameter Age;
            ElementParameter err {
                Range: errh::PendingErrors;
            }
            StringParameter formData {
                IndexDomain: (webui::ffn);
                Property: Input;
            }
            StringParameter validationErrors {
                IndexDomain: (webui::ffn);
                Property: Output;
            }
        }
        Procedure CreateNewPerson {
            Arguments: (formData,newPersonName);
            Body: {
                !DialogMessage("MyValidateForm");
                
                SetElementAdd(Persons,aPerson,formData('PersonName'));
                
                newPersonName := formData('PersonName');
            }
            StringParameter formData {
                IndexDomain: (webui::ffn);
                Property: Input;
            }
            StringParameter newPersonName {
                Property: Output;
            }
            ElementParameter aPerson {
                Range: Persons;
            }
        }
    }
}
