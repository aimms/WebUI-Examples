## ams_version=1.0

Model Main_AddressBook {
    Procedure Initialize {
        Body: {
            UnregisterAllOurDataChangeMonitors();
            InitializeAddressBook();
            RegisterDataChangeMonitors();
            
            initializeAllPublicIdentifiersProcedure := StringToElement(AllIdentifiers, "webui_runtime::InitializeAllPublicIdentifiers");
            if (initializeAllPublicIdentifiersProcedure) then
            	me::Compile(initializeAllPublicIdentifiersProcedure);
            	Apply(initializeAllPublicIdentifiersProcedure);
            endif ;
            
            empty Requests;
            empty RequestQueue;
        }
        ElementParameter initializeAllPublicIdentifiersProcedure {
            Range: AllProcedures;
            Default: 'webui::NoOp';
        }
    }
    Set Foo;
    StringParameter Form_PersonName_annotations {
        Definition: "validation-error-min-length" onlyif ( StringLength(Form_PersonName) lt 2 );
    }
    ElementParameter theSelectedPerson {
        Range: Persons;
        Definition: {
            first(p | SelectedPersons(p));
        }
    }
    Set Persons {
        Index: p;
    }
    Parameter SelectedPersons {
        IndexDomain: p;
        Default: -1;
    }
    StringParameter PhoneNumbers {
        IndexDomain: p;
    }
    StringParameter Form_PersonName {
        Default: "no person selected";
    }
    StringParameter Form_PhoneNumber {
        Default: "no person selected";
    }
    ElementParameter Form_Person {
        Range: Persons;
    }
    StringParameter LocalRQ {
        IndexDomain: (rq,df);
    }
    Section AddressBook_Operations {
        Procedure UpdatePerson {
            Arguments: (aPerson,personName,phoneNumber);
            Body: {
                if ( not StringToElement(Persons, personName) or FormatString("%e", aPerson) = personName ) then
                	SetElementRename(Persons, aPerson, personName);
                	PhoneNumbers(aPerson) := phoneNumber;
                else
                	raise error "Person with that name already exists!";
                endif ;
            }
            ElementParameter aPerson {
                Range: Persons;
                Property: Input;
            }
            StringParameter personName {
                Property: Optional;
            }
            StringParameter phoneNumber {
                Property: Optional;
            }
        }
        Procedure AddPerson {
            Arguments: (personName,aPerson);
            Body: {
                if ( not StringToElement(Persons, personName) ) then
                	SetElementAdd(Persons, aPerson, personName);
                	SelectedPersons(aPerson) := 0;
                else
                	raise error "Person with that name already exists!";
                endif ;
            }
            StringParameter personName {
                Property: Input;
            }
            ElementParameter aPerson {
                Range: Persons;
                Property: Output;
            }
        }
        Procedure InitializeAddressBook {
            Body: {
                
                Persons := data { Raymond, Marcel };
                SelectedPersons(p) := data { Raymond : 0,  Marcel : 0 };
                PhoneNumbers(p) := data { Raymond : "+31620340347",  Marcel : "+31624273820" };
                
                empty Form_PersonName;
                empty Form_PhoneNumber;
                IsDirty := 0;
            }
        }
        Procedure NewPerson {
            Body: {
                SelectedPersons(p) := 0;
            }
        }
        Procedure DeletePerson {
            Body: {
                empty PhoneNumbers(theSelectedPerson);
                empty SelectedPersons(theSelectedPerson);
                Persons -= theSelectedPerson;
            }
        }
        Procedure SaveChanges {
            Body: {
                if ( not theSelectedPerson ) then
                	AddPerson(Form_PersonName, aPerson);
                	SelectedPersons(aPerson) := 1;
                endif ;
                
                UpdatePerson(theSelectedPerson, personName: Form_PersonName, phoneNumber: Form_PhoneNumber);
                
                IsDirty := 0;
            }
            ElementParameter aPerson {
                Range: Persons;
            }
        }
    }
    Section DataChangeMonitor_Declarations {
        Parameter IsDirty {
            Default: 0;
        }
        Set AllMonitorsRegisteredByUs {
            SubsetOf: webui::RegisteredDataChangeMonitors;
        }
        ElementParameter formMonitor {
            Range: webui::RegisteredDataChangeMonitors;
        }
        Procedure RegisterDataChangeMonitors {
            Body: {
                monitoredIdentifiers := { 'SelectedPersons' };
                webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'HandleSelectedPersonsChange', aMonitor);
                
                AllMonitorsRegisteredByUs += aMonitor;
            }
            ElementParameter aMonitor {
                Range: webui::RegisteredDataChangeMonitors;
            }
            ElementParameter aCallbackProcedure {
                Range: AllProcedures;
                Default: 'webui::NoOp';
            }
            Set monitoredIdentifiers {
                SubsetOf: AllIdentifiers;
            }
        }
        Procedure UnregisterAllOurDataChangeMonitors {
            Body: {
                
                                ! PRO MEMORI: This does not work because of the super set of allOurMonitors gets updated as
                                !             we unregister stuff:
                
                                !for (allOurMonitors) do
                                !    webui::DataChangeMonitorUnregisterCallback(allOurMonitors);
                                !endfor;
                
                                while Card(AllMonitorsRegisteredByUs) > 0 do
                                   webui::DataChangeMonitorUnregisterCallback(First(AllMonitorsRegisteredByUs));
                                endwhile;
            }
        }
        Procedure MarkFormAsDirty {
            Body: {
                IsDirty := 1;
            }
        }
        Procedure HandleSelectedPersonsChange {
            Body: {
                if IsDirty then
                	! Prevents double dialog requests caused by the single select's unselect (which is also a datachange)
                	! @TODO remove if when requestSetValues is implemented.
                	if (theSelectedPerson and theSelectedPerson <> Form_Person) then
                		dialogActions := {'apply and continue','discard and continue','cancel'};
                		requestPerformWebUIDialog("title", "message", dialogActions, 'HandleFormIsDirtyDialogResult');
                	endif;
                else
                	UpdateFormWithSelectedPersonInfo;
                endif;
            }
            Set dialogActions;
        }
        Procedure HandleFormIsDirtyDialogResult {
            Arguments: (selectedAction);
            Body: {
                Display "HandleFormIsDirtyDialogResult", selectedAction;
                
                if ( selectedAction = "apply and continue" ) then
                	webui::NoOp;
                elseif ( selectedAction = "discard and continue" ) then
                	webui::NoOp;
                elseif ( selectedAction = "cancel" ) then
                	SelectedPersons(p) := 0;
                	SelectedPersons(Form_Person) := 1;
                else
                	raise error "Unsupported action";
                endif;
            }
            StringParameter selectedAction {
                Property: Input;
            }
        }
        Procedure UpdateFormWithSelectedPersonInfo {
            Body: {
                if(formMonitor) then
                	webui::DataChangeMonitorUnregisterCallback(formMonitor);
                	AllMonitorsRegisteredByUs -= formMonitor;
                	empty formMonitor;
                endif;
                
                Form_Person := theSelectedPerson;
                Form_PersonName := FormatString("%e", theSelectedPerson);
                Form_PhoneNumber := PhoneNumbers(theSelectedPerson);
                
                monitoredIdentifiers := { 'Form_PersonName', 'Form_PhoneNumber' };
                webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'MarkFormAsDirty', formMonitor);
                
                AllMonitorsRegisteredByUs += formMonitor;
            }
            Set monitoredIdentifiers {
                SubsetOf: AllIdentifiers;
            }
        }
    }
    Procedure MainInitialization;
    Procedure MainExecution;
    Procedure MainTermination {
        Body: {
            return DataManagementExit();
        }
    }
    Section Model_WebUI_Interaction {
        Procedure NoOp1 {
            Arguments: (arg1);
            Body: {
                !Does nothing
            }
            StringParameter arg1 {
                Property: Input;
            }
        }
        Function toJsonString {
            Arguments: (str);
            Range: string;
            Body: {
                str := FormatString("\"%s\"", str);
                toJsonString := str;
            }
            StringParameter str {
                Property: Input;
            }
        }
        Function SettoJsonList {
            Arguments: (aSet);
            Range: string;
            Body: {
                tmpString += "[";
                
                for(s) do
                	tmpString += toJsonString(FormatString("%e", s));
                
                	if (s <> Last(aSet)) then
                		tmpString += ",";
                	endif;
                endfor;
                
                tmpString += "]";
                
                SettoJsonList := tmpString;
            }
            StringParameter tmpString;
            Set aSet {
                Index: s;
                Property: Input;
            }
        }
        ElementParameter requestQueueMonitor {
            Range: webui::RegisteredDataChangeMonitors;
        }
        Set Requests {
            SubsetOf: Integers;
            Index: rq;
        }
        Parameter RequestCounter;
        StringParameter RequestQueue {
            IndexDomain: (rq,df);
        }
        StringParameter RequestPerformDialogInfo {
            IndexDomain: df;
        }
        Set DialogFields {
            Index: df;
            InitialData: data { title, message, actions, onDone, result };
        }
        Procedure HandleCompletedDialogRequests {
            Body: {
                CompletedRequests := { rq | RequestQueue(rq, 'result') <> "<empty>" };
                !DialogMessage("HandleCompletedDialogRequests, continue?");
                
                !Requests | RequestQueue(completedRequest, 'result') <> "<empty>";
                while Card(CompletedRequests) > 0 do
                	completedRequest := First(CompletedRequests);
                	Display  RequestQueue(completedRequest,'onDone');
                	onDone := StringToElement(AllProcedures, RequestQueue(completedRequest,'onDone'));
                	resultValue := RequestQueue(completedRequest, 'result');
                	Apply(onDone, resultValue);
                	empty RequestQueue(completedRequest,df);
                	Requests -= completedRequest;
                endwhile;
            }
            ElementParameter completedRequest {
                Range: Requests;
            }
            Set CompletedRequests {
                SubsetOf: Requests;
                Index: crq;
            }
            ElementParameter onDone {
                Range: AllProcedures;
                Default: 'NoOp1';
            }
            StringParameter resultValue;
        }
        Procedure requestPerformWebUIDialog {
            Arguments: (title,message,actions,onDone);
            Body: {
                if(not requestQueueMonitor) then
                	monitoredIdentifiers := { 'RequestQueue' };
                	webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'HandleCompletedDialogRequests', requestQueueMonitor);
                endif;
                
                RequestCounter += 1;
                Requests += RequestCounter;
                RequestQueue(RequestCounter, 'title') := title;
                RequestQueue(RequestCounter, 'message') := message;
                for(a) do
                	actionsString += FormatString("%e", a);
                endfor;
                !RequestQueue(RequestCounter, 'actions') := actionsString;
                RequestQueue(RequestCounter, 'actions') := SettoJsonList(actions);
                RequestQueue(RequestCounter, 'onDone') := onDone;
                RequestQueue(RequestCounter, 'result') := "<empty>";
            }
            Set monitoredIdentifiers {
                SubsetOf: AllIdentifiers;
            }
            StringParameter actionsString;
            Set actions {
                Index: a;
                Property: Input;
            }
            StringParameter title {
                Property: Input;
            }
            StringParameter message {
                Property: Input;
            }
            ElementParameter onDone {
                Range: AllProcedures;
                Default: 'NoOp1';
                Property: Input;
            }
        }
    }
    Section DEBUG {
        Procedure DEBUG_init {
            Body: {
                DataChangeMonitorDelete("DEBUG");
                DataChangeMonitorCreate("DEBUG",DEBUG_Set);
                LocalRQ(rq, df) := RequestQueue(rq, df);
            }
        }
        Set DEBUG_Set {
            SubsetOf: AllIdentifiers;
            Definition: data { 'LocalRQ' };
        }
        Procedure MonitoredDataChangedProcedure_for_DataChangeMonitor003_Set {
            Body: {
                switch ( DataChangeMonitorHasChanged("DEBUG") ) do
                       1:
                               DataChangeMonitorReset("DEBUG",DEBUG_Set);
                               DialogMessage("data has changed");
                               return 1;
                       0:
                       		DialogMessage("data has not changed");
                               return 0;
                       -1:
                               Display CurrentErrorMessage;
                               raise error "Something bad happened";
                endswitch;
            }
        }
    }
}
