## ams_version=1.0

Model Main_AddressBook {
    Procedure Initialize {
        Body: {
            UnregisterAllOurDataChangeMonitors();
            InitializeAddressBook();
            RegisterDataChangeMonitors();
            
            initializeAllPublicIdentifiersProcedure := StringToElement(AllIdentifiers, "webui_runtime::InitializeAllPublicIdentifiers");
            me::Compile(initializeAllPublicIdentifiersProcedure);
            Apply(initializeAllPublicIdentifiersProcedure);
        }
        ElementParameter initializeAllPublicIdentifiersProcedure {
            Range: AllProcedures;
            Default: 'webui::NoOp';
        }
    }
    ElementParameter theSelectedPerson {
        Range: Persons;
        Definition: {
            first(p | SelectedPersons(p));
        }
    }
    Set Persons {
        Index: p;
    }
    Parameter SelectedPersons {
        IndexDomain: p;
        Default: -1;
    }
    StringParameter PhoneNumbers {
        IndexDomain: p;
    }
    StringParameter Form_PersonName {
        Default: "no person selected";
    }
    StringParameter Form_PhoneNumber {
        Default: "no person selected";
    }
    Section AddressBook_Operations {
        Procedure UpdatePerson {
            Arguments: (aPerson,personName,phoneNumber);
            Body: {
                if ( not StringToElement(Persons, personName) or FormatString("%e", aPerson) = personName ) then
                	SetElementRename(Persons, aPerson, personName);
                	PhoneNumbers(aPerson) := phoneNumber;
                else
                	raise error "Person with that name already exists!";
                endif ;
            }
            ElementParameter aPerson {
                Range: Persons;
                Property: Input;
            }
            StringParameter personName {
                Property: Optional;
            }
            StringParameter phoneNumber {
                Property: Optional;
            }
        }
        Procedure AddPerson {
            Arguments: (personName,aPerson);
            Body: {
                if ( not StringToElement(Persons, personName) ) then
                	SetElementAdd(Persons, aPerson, personName);
                	SelectedPersons(aPerson) := 0;
                else
                	raise error "Person with that name already exists!";
                endif ;
            }
            StringParameter personName {
                Property: Input;
            }
            ElementParameter aPerson {
                Range: Persons;
                Property: Output;
            }
        }
        Procedure InitializeAddressBook {
            Body: {
                Persons := data { Raymond, Marcel };
                SelectedPersons(p) := data { Raymond : 0,  Marcel : 0 };
                PhoneNumbers(p) := data { Raymond : "+31620340347",  Marcel : "+31624273820" };
            }
        }
        Procedure NewPerson {
            Body: {
                SelectedPersons(p) := 0;
            }
        }
        Procedure DeletePerson {
            Body: {
                empty PhoneNumbers(theSelectedPerson);
                empty SelectedPersons(theSelectedPerson);
                Persons -= theSelectedPerson;
            }
        }
        Procedure SaveChanges {
            Body: {
                if ( not theSelectedPerson ) then
                	AddPerson(Form_PersonName, aPerson);
                	SelectedPersons(aPerson) := 1;
                endif ;
                
                UpdatePerson(theSelectedPerson, personName: Form_PersonName, phoneNumber: Form_PhoneNumber);
            }
            ElementParameter aPerson {
                Range: Persons;
            }
        }
    }
    Section DataChangeMonitor_Declarations {
        Set AllMonitorsRegisteredByUs {
            SubsetOf: webui::RegisteredDataChangeMonitors;
        }
        Procedure RegisterDataChangeMonitors {
            Body: {
                monitoredIdentifiers := { 'SelectedPersons' };
                webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'UpdateFormUponSelectedPersonsChange', aMonitor);
                
                AllMonitorsRegisteredByUs += aMonitor;
                
                !monitoredIdentifiers := { 'MealProductionLineStart' };
                !webui::DataChangeMonitorRegisterCallback(monitoredIdentifiers, 'TestDataChangeMonitor2', aMonitor);
                
                !AllMonitorsRegisteredByUs += aMonitor;
            }
            ElementParameter aMonitor {
                Range: webui::RegisteredDataChangeMonitors;
            }
            ElementParameter aCallbackProcedure {
                Range: AllProcedures;
                Default: 'webui::NoOp';
            }
            Set monitoredIdentifiers {
                SubsetOf: AllIdentifiers;
            }
        }
        Procedure UnregisterAllOurDataChangeMonitors {
            Body: {
                
                                ! PRO MEMORI: This does not work because of the super set of allOurMonitors gets updated as
                                !             we unregister stuff:
                
                                !for (allOurMonitors) do
                                !    webui::DataChangeMonitorUnregisterCallback(allOurMonitors);
                                !endfor;
                
                                while Card(AllMonitorsRegisteredByUs) > 0 do
                                   webui::DataChangeMonitorUnregisterCallback(First(AllMonitorsRegisteredByUs));
                                endwhile;
            }
        }
        Procedure UpdateFormUponSelectedPersonsChange {
            Body: {
                Form_PersonName := FormatString("%e", theSelectedPerson);
                Form_PhoneNumber := PhoneNumbers(theSelectedPerson);
            }
        }
    }
    Procedure MainInitialization;
    Procedure MainExecution;
    Procedure MainTermination {
        Body: {
            return DataManagementExit();
        }
    }
}
