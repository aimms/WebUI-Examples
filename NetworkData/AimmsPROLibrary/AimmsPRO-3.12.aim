SECTION

  SECTION DLL_Interface


    MODULE PRO_Management
        prefix     :  management


      EXTERNAL PROCEDURE
        identifier  :  Initialize
        arguments   :  (endPoint,tempFolder,dllFolder,logConfigFile,lang,environment,userName,password)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_Initialize(
                          scalar string : endPoint,
                          scalar string : tempFolder,
                          scalar string : dllFolder,
                          scalar string : logConfigFile,
                          scalar integer : lang,
                          scalar string : environment,
                          scalar string : userName,
                          scalar string : password
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  endPoint
             property   :  Input ;

          STRING PARAMETER:
             identifier :  tempFolder
             property   :  Input ;

          STRING PARAMETER:
             identifier :  dllFolder
             property   :  Input ;

          STRING PARAMETER:
             identifier :  logConfigFile
             property   :  Input ;

          PARAMETER:
             identifier :  lang
             property   :  Input ;

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  userName
             property   :  Input ;

          STRING PARAMETER:
             identifier :  password
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  IsInitialized
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_IsInitialized()

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  IsConnected
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_IsConnected()

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  Finalize
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_Finalize()

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetLastError
        arguments   :  (errorID,description)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_GetLastError(
                           scalar integer : errorID,
                           handle : description
                         )

        DECLARATION SECTION 

          PARAMETER:
             identifier :  errorID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  description
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RunProcedureAsync
        arguments   :  (procName,delay)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_RunProcedureAsync(
                           scalar string : procName,
                           scalar integer : delay
                         )

        DECLARATION SECTION 

          ELEMENT PARAMETER:
             identifier :  procName
             range      :  AllProcedures
             property   :  Input ;

          PARAMETER:
             identifier :  delay
             default    :  5000
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetConfig
        arguments   :  (service,key,value)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_GetConfig(
                           scalar string : service,
                           scalar string : key,
                           handle : value
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  key
             property   :  Input ;

          STRING PARAMETER:
             identifier :  value
             property   :  Output ;

          STRING PARAMETER:
             identifier :  service
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetConfigVector
        arguments   :  (service,keyVector,valueVector)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_GetConfigVector(
                           scalar string : service,
                           handle : keyVector,
                           handle : valueVector
                         )

        DECLARATION SECTION 

          HANDLE:
             identifier :  keyVector
             property   :  Input ;

          HANDLE:
             identifier :  valueVector
             property   :  Output ;

          STRING PARAMETER:
             identifier :  service
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SetConfig
        arguments   :  (service,key,value,restart)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PRO_SetConfig(
                          scalar string : service,
                          scalar string : key,
                          scalar string : value,
                          scalar integer : restart
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  key
             property   :  Input ;

          STRING PARAMETER:
             identifier :  value
             property   :  Input ;

          STRING PARAMETER:
             identifier :  service
             property   :  Input ;

          PARAMETER:
             identifier :  restart
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UnpackIStorage
        arguments   :  (archive)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  UnpackIStorage(
                           scalar string : archive
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  archive
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  PackIStorage
        arguments   :  (folder)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PackIStorage(
                           scalar string : folder
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  folder
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  LocalLogInfo
        arguments   :  (msg)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  LocalLogInfo(
                           scalar string : msg
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  msg
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  LocalLogError
        arguments   :  (msg)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  LocalLogError(
                           scalar string : msg
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  msg
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ManageFileBuffer
        arguments   :  (path,max_size,remain_size)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  ManageFileBuffer(
                          scalar string : path,
                          scalar integer : max_size,
                          scalar integer : remain_size
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          PARAMETER:
             identifier :  max_size
             property   :  Input ;

          PARAMETER:
             identifier :  remain_size
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetScalarSuffixValue
        arguments   :  (identifierName,suffixName,scalarSuffixValue)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  GetScalarSuffixValue(
                          scalar string : identifierName,
                          scalar string : suffixName,
                          handle : scalarSuffixValue
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  identifierName
             property   :  Input ;

          STRING PARAMETER:
             identifier :  suffixName
             property   :  Input ;

          STRING PARAMETER:
             identifier :  scalarSuffixValue
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SetElementToName
        arguments   :  (setHandle,elemNumber,elementName)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  SetElementToName(
                          handle : setHandle,
                          scalar integer : elemNumber,
                          handle : elementName
                        )

        DECLARATION SECTION 

          PARAMETER:
             identifier :  elemNumber
             property   :  Input ;

          STRING PARAMETER:
             identifier :  elementName
             property   :  Output ;

          HANDLE:
             identifier :  setHandle
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  CheckCallbackProcedurePrototype
        arguments   :  (procedureName)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_CheckCallBackProcedurePrototype(
                          scalar string : procedureName
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  procedureName
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

    ENDMODULE PRO_Management ;

    MODULE PRO_Authentication_Service
        prefix     :  authentication


      EXTERNAL PROCEDURE
        identifier  :  AddEnvironment
        arguments   :  (environment,description,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_AddEnvironment(
                           scalar string : environment,
                           scalar string : description,
                           scalar string : authorization
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  description
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  AddGroup
        arguments   :  (environment,group,description)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_AddGroup(
                           scalar string : environment,
                           scalar string : group,
                           scalar string : description
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  description
             property   :  Input ;

          STRING PARAMETER:
             identifier :  group
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  AddUser
        arguments   :  (environment,username,fullname,email,password)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_AddUser(
                           scalar string : environment,
                           scalar string : username,
                           scalar string : fullname,
                           scalar string : email,
                           scalar string : password
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  username
             property   :  Input ;

          STRING PARAMETER:
             identifier :  fullname
             property   :  Input ;

          STRING PARAMETER:
             identifier :  email
             property   :  Input ;

          STRING PARAMETER:
             identifier :  password
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RemoveEnvironment
        arguments   :  (environment)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_RemoveEnvironment(
                           scalar string : environment
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RemoveGroup
        arguments   :  (environment,group)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_RemoveGroup(
                           scalar string : environment,
                           scalar string : group
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  group
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RemoveUser
        arguments   :  (environment,username)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_RemoveUser(
                           scalar string : environment,
                           scalar string : username
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  username
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  AssociateUserGroup
        arguments   :  (userenv,username,groupenv,group)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_AssociateUserGroup(
                           scalar string : userenv,
                           scalar string : username,
                           scalar string : groupenv,
                           scalar string : group
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  userenv
             property   :  Input ;

          STRING PARAMETER:
             identifier :  username
             property   :  Input ;

          STRING PARAMETER:
             identifier :  groupenv
             property   :  Input ;

          STRING PARAMETER:
             identifier :  group
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DisassociateUserGroup
        arguments   :  (userenv,username,groupenv,group)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_DisassociateUserGroup(
                           scalar string : userenv,
                           scalar string : username,
                           scalar string : groupenv,
                           scalar string : group
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  userenv
             property   :  Input ;

          STRING PARAMETER:
             identifier :  username
             property   :  Input ;

          STRING PARAMETER:
             identifier :  groupenv
             property   :  Input ;

          STRING PARAMETER:
             identifier :  group
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateEnvironment
        arguments   :  (environment,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_UpdateEnvironment(
                           scalar string : environment,
                           scalar string : authorization
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateUser
        arguments   :  (environment,username,fullname,email,password)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_UpdateUser(
                           scalar string : environment,
                           scalar string : username,
                           scalar string : fullname,
                           scalar string : email,
                           scalar string : password
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  environment
             property   :  Input ;

          STRING PARAMETER:
             identifier :  username
             property   :  Input ;

          STRING PARAMETER:
             identifier :  password
             property   :  Input ;

          STRING PARAMETER:
             identifier :  fullname
             property   :  Input ;

          STRING PARAMETER:
             identifier :  email
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetCurrentUserGroupList
        arguments   :  (grpSet,grpName)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_GetCurrentUserGroupListInSet(
                           handle : grpSet,
                           handle : grpName
                         )

        DECLARATION SECTION 

          SET:
             identifier   :  grpSet
             index        :  i_gr
             property     :  Output ;

          STRING PARAMETER:
             identifier   :  grpName
             index domain :  i_gr
             property     :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetEnvironmentList
        arguments   :  (envSet,envName,description,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_GetEnvironmentListInSet(
                           handle : envSet,
                           handle : envName,
                           handle : description,
                           handle : authorization
                         )

        DECLARATION SECTION 

          SET:
             identifier :  envSet
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

          STRING PARAMETER:
             identifier :  description
             property   :  Output ;

          STRING PARAMETER:
             identifier :  envName
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetEnvironmentUsersAndGroups
        arguments   :  (environment,usrSet,grpSet,usrName,grpName)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_GetEntityListInSet(
                           scalar string : environment,
                           handle : grpSet,
                           handle : usrSet,
                           handle : grpName,
                           handle : usrName,
                           literal integer: 0
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier   :  environment
             property     :  Input ;

          SET:
             identifier   :  grpSet
             index        :  i_g
             property     :  InOut ;

          SET:
             identifier   :  usrSet
             index        :  i_u
             property     :  InOut ;

          STRING PARAMETER:
             identifier   :  usrName
             index domain :  (i_u)
             property     :  InOut ;

          STRING PARAMETER:
             identifier   :  grpName
             index domain :  (i_g)
             property     :  InOut ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetEntityList
        arguments   :  (environment,usrSet,grpSet,usrName,grpName,usrGrpRelat)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROA_GetEntityListInSet(
                           scalar string : environment,
                           handle : grpSet,
                           handle : usrSet,
                           handle : grpName,
                           handle : usrName,
                           handle : usrGrpRelat
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier   :  environment
             property     :  Input ;

          SET:
             identifier   :  grpSet
             index        :  i_g
             property     :  InOut ;

          SET:
             identifier   :  usrSet
             index        :  i_u
             property     :  InOut ;

          STRING PARAMETER:
             identifier   :  usrName
             index domain :  (i_u)
             property     :  InOut ;

          STRING PARAMETER:
             identifier   :  grpName
             index domain :  (i_g)
             property     :  InOut ;

          PARAMETER:
             identifier   :  usrGrpRelat
             index domain :  (i_u,i_g)
             property     :  InOut ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

    ENDMODULE PRO_Authentication_Service ;

    MODULE PRO_Session_Manager
        prefix     :  sessionmanager


      EXTERNAL PROCEDURE
        identifier  :  NewSession
        arguments   :  (projectID,projectVersion,maxInitTime,terminateTimeOut,authorization,sessionID,clientQueue,
                         workerQueue)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_NewSession(
                           scalar string : projectID,
                           scalar string : projectVersion,
                           scalar integer : maxInitTime,
                           scalar integer : terminateTimeOut,
                           scalar string : authorization,
                           handle : sessionID,
                           handle : clientQueue,
                           handle : workerQueue
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  projectID
             property   :  Input ;

          PARAMETER:
             identifier :  maxInitTime
             property   :  Input ;

          PARAMETER:
             identifier :  terminateTimeOut
             property   :  Input ;

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  clientQueue
             property   :  Output ;

          STRING PARAMETER:
             identifier :  workerQueue
             property   :  Output ;

          STRING PARAMETER:
             identifier :  projectVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  StartSession
        arguments   :  (sessionID,licenseName,priorityAdjustment,scheduledAt)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_StartSession(
                          scalar string : sessionID,
                          scalar string : licenseName,
                                             scalar integer : priorityAdjustment,
                                              scalar string : scheduledAt
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  licenseName
             property   :  Optional ;

          PARAMETER:
             identifier :  priorityAdjustment
             range      :  integer
             default    :  0
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  scheduledAt
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  EndSession
        arguments   :  (sessionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_EndSession(
                           scalar string : sessionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  TerminateSession
        arguments   :  (sessionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_TerminateSession(
                           scalar string : sessionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  CurrentState
        arguments   :  (sessionSet,sessionStatus)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_CurrentState(
                           handle : sessionSet,
                           handle : sessionStatus
                         )

        DECLARATION SECTION 

          HANDLE:
             identifier :  sessionSet
             property   :  Input ;

          HANDLE:
             identifier :  sessionStatus
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SetSessionReference
        arguments   :  (sessionID,clientQueue,workerQueue)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_SetSessionReference(
                           scalar string : sessionID,
                           scalar string : clientQueue,
                           scalar string : workerQueue
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  clientQueue
             property   :  Input ;

          STRING PARAMETER:
             identifier :  workerQueue
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RetrieveSessionList
        arguments   :  (sessionList,clientQueue,workerQueue,currentStatus,createTime,userEnvironment,userName,proj,
                        clientRef, descr, proc, timeOut, inputDataVersion, outputDataVersion, logFileVersion, errorMessage, modelStatus, errorCode)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_RetrieveSessionListInSet(
                          handle : sessionList,
                          handle : clientQueue,
                          handle : workerQueue,
                          handle : currentStatus,
                          handle : createTime,
                          handle : userEnvironment,
                          handle : userName,
                          handle : proj,
                          handle : clientRef,
                          handle : descr,
                          handle : proc,
                          handle : timeOut,
                          handle : inputDataVersion,
                          handle : outputDataVersion,
                          handle : logFileVersion,
                          handle : errorMessage,
                          handle : modelStatus,
                          handle : errorCode
                        )

        DECLARATION SECTION 

          SET:
             identifier :  sessionList
             property   :  Input ;
        
          STRING PARAMETER:
             identifier :  clientQueue
             property   :  Output ;

          STRING PARAMETER:
             identifier :  workerQueue
             property   :  Output ;

          PARAMETER:
             identifier :  currentStatus
             property   :  Output ;

          STRING PARAMETER:
             identifier :  userEnvironment
             property   :  Output ;

          STRING PARAMETER:
             identifier :  userName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  createTime
             property   :  Output ;

          STRING PARAMETER:
             identifier :  proj
             property   :  Output ;

          STRING PARAMETER:
             identifier :  clientRef
             property   :  Output ;

          STRING PARAMETER:
             identifier :  descr
             property   :  Output ;

          STRING PARAMETER:
             identifier :  proc
             property   :  Output ;

          PARAMETER:
             identifier :  timeOut
             property   :  Output ;

          STRING PARAMETER:
             identifier :  inputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  outputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  logFileVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  errorMessage
             property   :  Output ;

          PARAMETER:
             identifier :  modelStatus
             property   :  Output ;

          PARAMETER:
             identifier :  errorCode
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetRequestInfo
        arguments   :  (sessionID,clientRef,description,proc,timeOut,inputDataVersion,outputDataVersion,
                         logFileVersion,errorMessage,modelStatus,errorCode)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_GetRequestInfo(
                          scalar string : sessionID,
                          handle : clientRef,
                          handle : description,
                          handle : proc,
                          scalar integer : timeOut,
                          handle : inputDataVersion,
                          handle : outputDataVersion,
                          handle : logFileVersion,
                          handle : errorMessage,
                          scalar integer : modelStatus,
                          scalar integer : errorCode
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  clientRef
             property   :  Output ;

          STRING PARAMETER:
             identifier :  description
             property   :  Output ;

          STRING PARAMETER:
             identifier :  proc
             property   :  Output ;

          PARAMETER:
             identifier :  timeOut
             property   :  Output ;

          STRING PARAMETER:
             identifier :  inputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  outputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  logFileVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  errorMessage
             property   :  Output ;

          PARAMETER:
             identifier :  modelStatus
             property   :  Output ;

          PARAMETER:
             identifier :  errorCode
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SetRequestInfo
        arguments   :  (sessionID,clientRef,description,proc,timeOut,inputDataVersion,outputDataVersion,
                         logFileVersion,errorMessage,modelStatus,errorCode)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_SetRequestInfo(
                                scalar string  : sessionID,
                                scalar string  : clientRef,
                                scalar string  : description,
                                scalar string  : proc,
                                scalar integer : timeOut,
                                scalar string  : inputDataVersion,
                                scalar string  : outputDataVersion,
                                scalar string  : logFileVersion,
                                scalar string  : errorMessage,
                                scalar integer : modelStatus,
                                scalar integer : errorCode
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  sessionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  clientRef
             property   :  Input ;

          STRING PARAMETER:
             identifier :  description
             property   :  Input ;

          STRING PARAMETER:
             identifier :  proc
             property   :  Input ;

          PARAMETER:
             identifier :  timeOut
             property   :  Input ;

          STRING PARAMETER:
             identifier :  inputDataVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  outputDataVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  logFileVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  errorMessage
             property   :  Input ;

          PARAMETER:
             identifier :  modelStatus
             property   :  Input ;

          PARAMETER:
             identifier :  errorCode
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ClearSessionDatabase
        arguments   :  (sessionList,warningMsg)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_ClearSessionDatabase(
                          handle : sessionList,
                          handle : warningMsg
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  warningMsg
             property   :  Output ;

          SET:
             identifier :  sessionList
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ListActiveSessions
        arguments   :  (sessionList,clientQueue,workerQueue,currentStatus,createTime,userEnvironment,userName,proj,
                          clientRef, descr, proc, timeOut, inputDataVersion, outputDataVersion, logFileVersion, errorMessage, modelStatus, errorCode,
                          allUsers,projectID,projectVersion)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_ListActiveSessionsInSet(
                            scalar integer : allUsers,
                            scalar string : projectID,
                            scalar string : projectVersion,
                            handle : sessionList,
                            handle : clientQueue,
                            handle : workerQueue,
                            handle : currentStatus,
                            handle : createTime,
                            handle : userEnvironment,
                            handle : userName,
                            handle : proj,
                            handle : clientRef,
                            handle : descr,
                            handle : proc,
                            handle : timeOut,
                            handle : inputDataVersion,
                            handle : outputDataVersion,
                            handle : logFileVersion,
                            handle : errorMessage,
                            handle : modelStatus,
                            handle : errorCode
                          )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  clientQueue
             property   :  Output ;

          STRING PARAMETER:
             identifier :  workerQueue
             property   :  Output ;

          SET:
             identifier :  sessionList
             property   :  Output ;

          PARAMETER:
             identifier :  currentStatus
             property   :  Output ;

          PARAMETER:
             identifier :  allUsers
             default    :  0
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  userEnvironment
             property   :  Output ;

          STRING PARAMETER:
             identifier :  userName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  createTime
             property   :  Output ;

          STRING PARAMETER:
             identifier :  projectID
             default    :  ""
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  projectVersion
             default    :  ""
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  proj
             property   :  Output ;

          STRING PARAMETER:
             identifier :  clientRef
             property   :  Output ;

          STRING PARAMETER:
             identifier :  descr
             property   :  Output ;

          STRING PARAMETER:
             identifier :  proc
             property   :  Output ;

          PARAMETER:
             identifier :  timeOut
             property   :  Output ;

          STRING PARAMETER:
             identifier :  inputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  outputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  logFileVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  errorMessage
             property   :  Output ;

          PARAMETER:
             identifier :  modelStatus
             property   :  Output ;

          PARAMETER:
             identifier :  errorCode
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ListSessionByStatus
        arguments   :  (requestedStatus,sessionList,clientQueue,workerQueue,currentStatus,createTime,userEnvironment,userName,proj,
                         clientRef, descr, proc, timeOut, inputDataVersion, outputDataVersion, logFileVersion, errorMessage, modelStatus, errorCode,
                         allUsers,projectID,projectVersion)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_ListSessionByStatusInSet(
                           scalar integer : requestedStatus,
                           scalar integer : allUsers,
                           scalar string : projectID,
                           scalar string : projectVersion,
                           handle : sessionList,
                           handle : clientQueue,
                           handle : workerQueue,
                           handle : currentStatus,
                           handle : createTime,
                           handle : userEnvironment,
                           handle : userName,
                           handle : proj,
                           handle : clientRef,
                           handle : descr,
                           handle : proc,
                           handle : timeOut,
                           handle : inputDataVersion,
                           handle : outputDataVersion,
                           handle : logFileVersion,
                           handle : errorMessage,
                           handle : modelStatus,
                           handle : errorCode
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  clientQueue
             property   :  Output ;

          STRING PARAMETER:
             identifier :  workerQueue
             property   :  Output ;

          SET:
             identifier :  sessionList
             property   :  Output ;

          PARAMETER:
             identifier :  currentStatus
             property   :  Output ;

          PARAMETER:
             identifier :  requestedStatus
             property   :  Input ;

          PARAMETER:
             identifier :  allUsers
             default    :  0
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  userEnvironment
             property   :  Output ;

          STRING PARAMETER:
             identifier :  userName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  createTime
             property   :  Output ;

          STRING PARAMETER:
             identifier :  projectID
             default    :  ""
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  projectVersion
             default    :  ""
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  proj
             property   :  Output ;

          STRING PARAMETER:
             identifier :  clientRef
             property   :  Output ;

          STRING PARAMETER:
             identifier :  descr
             property   :  Output ;

          STRING PARAMETER:
             identifier :  proc
             property   :  Output ;

          PARAMETER:
             identifier :  timeOut
             property   :  Output ;

          STRING PARAMETER:
             identifier :  inputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  outputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  logFileVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  errorMessage
             property   :  Output ;

          PARAMETER:
             identifier :  modelStatus
             property   :  Output ;

          PARAMETER:
             identifier :  errorCode
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ListSessionSinceDate
        arguments   :  (dateStr,sessionList,clientQueue,workerQueue,currentStatus,createTime,userEnvironment,userName,proj,
                         clientRef, descr, proc, timeOut, inputDataVersion, outputDataVersion, logFileVersion, errorMessage, modelStatus, errorCode,
                         AllUsers,projectID,projectVersion)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROT_ListSessionSinceDateInSet(
                           scalar integer : AllUsers,
                           scalar string : projectID,
                           scalar string : projectVersion,
                           scalar string : dateStr,
                           handle : sessionList,
                           handle : clientQueue,
                           handle : workerQueue,
                           handle : currentStatus,
                           handle : createTime,
                           handle : userEnvironment,
                           handle : userName,
                           handle : proj,
                           handle : clientRef,
                           handle : descr,
                           handle : proc,
                           handle : timeOut,
                           handle : inputDataVersion,
                           handle : outputDataVersion,
                           handle : logFileVersion,
                           handle : errorMessage,
                           handle : modelStatus,
                           handle : errorCode
                           )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  clientQueue
             property   :  Output ;

          STRING PARAMETER:
             identifier :  workerQueue
             property   :  Output ;

          SET:
             identifier :  sessionList
             property   :  Output ;

          PARAMETER:
             identifier :  currentStatus
             property   :  Output ;

          STRING PARAMETER:
             identifier :  dateStr
             property   :  Input ;

          PARAMETER:
             identifier :  AllUsers
             default    :  0
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  userEnvironment
             property   :  Output ;

          STRING PARAMETER:
             identifier :  userName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  createTime
             property   :  Output ;

          STRING PARAMETER:
             identifier :  projectID
             default    :  ""
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  projectVersion
             default    :  ""
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  proj
             property   :  Output ;

          STRING PARAMETER:
             identifier :  clientRef
             property   :  Output ;

          STRING PARAMETER:
             identifier :  descr
             property   :  Output ;

          STRING PARAMETER:
             identifier :  proc
             property   :  Output ;

          PARAMETER:
             identifier :  timeOut
             property   :  Output ;

          STRING PARAMETER:
             identifier :  inputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  outputDataVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  logFileVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  errorMessage
             property   :  Output ;

          PARAMETER:
             identifier :  modelStatus
             property   :  Output ;

          PARAMETER:
             identifier :  errorCode
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

    ENDMODULE PRO_Session_Manager ;

    MODULE PRO_Messaging_Service
        prefix     :  messaging


      DECLARATION SECTION 

        STRING PARAMETER:
           identifier :  RuntimeErrors ;

      ENDSECTION  ;

      EXTERNAL PROCEDURE
        identifier  :  CreateQueue
        arguments   :  (authorization,queueID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_CreateQueue(
                           scalar string : authorization,
                           handle : queueID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetQueueInfo
        arguments   :  (queueID,queuedMsg,closedQueue)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_GetQueueInfo(
                          scalar string : queueID,
                          scalar integer : queuedMsg,
                          scalar integer : closedQueue
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          PARAMETER:
             identifier :  queuedMsg
             property   :  Output ;

          PARAMETER:
             identifier :  closedQueue
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  TerminateQueue
        arguments   :  (queueID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_TerminateQueue(
                           scalar string : queueID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  CreateConnection
        arguments   :  (connectionID,callBackProcedure)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_CreateConnection(
                           handle : connectionID,
                           scalar string : callBackProcedure
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  connectionID
             property   :  Output ;

          ELEMENT PARAMETER:
             identifier :  callBackProcedure
             range      :  AllProcedures
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  AddQueueToConnection
        arguments   :  (queueID,connectionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_AddQueueToConnection(
                           scalar string : queueID,
                           scalar string : connectionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  connectionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RemoveQueueFromConnection
        arguments   :  (queueID,connectionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_RemoveQueueFromConnection(
                           scalar string : queueID,
                           scalar string : connectionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  connectionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  TerminateConnection
        arguments   :  (connectionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_TerminateConnection(
                           scalar string : connectionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  connectionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ClearMessageDatabase
        arguments   :  (sessionList)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_ClearMessageDatabase(
                          handle : sessionList
                        )

        DECLARATION SECTION 

          SET:
             identifier :  sessionList
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  WaitForUnhandledMessage
        arguments   :  (timeoutTime)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_WaitForUnhandledMessage(
                          scalar integer : timeoutTime
                        )

        DECLARATION SECTION 

          PARAMETER:
             identifier :  timeoutTime
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  WaitForMessagesExternal
        arguments   :  (queueID,flags,timeoutTime,runtimeErrors)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_WaitForMessages(
                               scalar string  : queueID,
                               scalar integer : flags,
                                   scalar integer : timeoutTime,
                                   handle         : runtimeErrors
                             )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             property   :  Input ;

          PARAMETER:
             identifier :  timeoutTime
             property   :  Input ;

          STRING PARAMETER:
             identifier :  runtimeErrors
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  WaitForMessages
        arguments  :  (queueID,flags,timeoutTime)

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             property   :  Input ;

          PARAMETER:
             identifier :  timeoutTime
             property   :  Input ;

          ELEMENT PARAMETER:
             identifier :  err
             range      :  errh::PendingErrors ;

          PARAMETER:
             identifier :  retval ;

        ENDSECTION  ;

        body       :  
          ! Work around error handling issue in older AIMMS versions
          block where external_procedure_error_handling := 'raise_always';
              retval := WaitForMessagesExternal(queueID,flags,timeoutTime,RuntimeErrors);
          endblock;
          
          return retval;

      ENDPROCEDURE  ;

      PROCEDURE
        identifier :  WaitForMessagesInternal
        arguments  :  (queueID,flags,timeoutTime)

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             property   :  Input ;

          PARAMETER:
             identifier :  timeoutTime
             property   :  Input ;

          ELEMENT PARAMETER:
             identifier :  err
             range      :  errh::PendingErrors ;

          PARAMETER:
             identifier :  retval ;

        ENDSECTION  ;

        body       :  
          ! Work around error handling issue in older AIMMS versions
          block where external_procedure_error_handling := 'raise_always';
              retval := WaitForMessagesExternal(queueID,flags,timeoutTime,RuntimeErrors);
          endblock;
          
          return retval;

      ENDPROCEDURE  ;

      FUNCTION
        identifier :  GetRuntimeErrors
        range      :  string
        body       :  
          GetRuntimeErrors := RuntimeErrors;

      ENDFUNCTION  ;

      EXTERNAL PROCEDURE
        identifier  :  BlockIncomingMessages
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_BlockIncomingMessages(
                         )

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UnblockIncomingMessages
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_UnblockIncomingMessages(
                         )

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  IncomingMessagesBlockCount
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_IncomingMessagesBlockCount(
                         )
        comment    :  "A count > 0 indicates that incoming priority messages are blocked during AIMMS execution"

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  CurrentlyHandledQueue
        arguments   :  (queueName)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROM_CurrentlyHandledQueue(
                                 handle  : queueName
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueName
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

    ENDMODULE PRO_Messaging_Service ;

    MODULE PRO_Storage_Service
        prefix     :  storage


      EXTERNAL PROCEDURE
        identifier  :  CreateBucket
        arguments   :  (path,bucketLabel,authorization,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_CreateBucket(
                           scalar string : path,
                           scalar string : separator,
                           scalar string : bucketLabel,
                           scalar string : authorization
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  bucketLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DeleteBucket
        arguments   :  (path,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_DeleteBucket(
                           scalar string : path,
                           scalar string : separator
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateBucket
        arguments   :  (path,authorization,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_UpdateBucket(
                           scalar string : path,
                           scalar string : separator,
                           scalar string : authorization
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  PutObjectVersion
        arguments   :  (path,objectLabel,filePath,authorization,versionID,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_PutObjectVersion(
                           scalar string : path,
                           scalar string : separator,
                           scalar string : objectLabel,
                           scalar string : filePath,
                           scalar string : authorization,
                           handle : versionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  objectLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  filePath
             property   :  Input ;

          STRING PARAMETER:
             identifier :  versionID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateObjectVersion
        arguments   :  (versionID,filePath,newVersionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_UpdateObjectVersion(
                           scalar string : versionID,
                           scalar string : filePath,
                           handle : newVersionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  versionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  filePath
             property   :  Input ;

          STRING PARAMETER:
             identifier :  newVersionID
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetObjectVersionUnbuffered
        arguments   :  (versionID,folder,getFileName)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_GetObjectVersion(
                           scalar string : versionID,
                           scalar string : folder,
                           handle : getFileName
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  getFileName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  folder
             property   :  Input ;

          STRING PARAMETER:
             identifier :  versionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DeleteObjectVersion
        arguments   :  (versionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_DeleteObjectVersion(
                           scalar string : versionID
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  versionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DeleteObjectVersionFromSet
        arguments   :  (versionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_DeleteObjectVersionFromSet(
                           handle : versionID
                         )

        DECLARATION SECTION 

          HANDLE:
             identifier :  versionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DeleteObjectAllVersions
        arguments   :  (path,objectLabel,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_DeleteObjectAllVersions(
                          scalar string : path,
                          scalar string : separator,
                          scalar string : objectLabel
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  objectLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateObject
        arguments   :  (path,objectLabel,authorization,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_UpdateObject(
                           scalar string : path,
                           scalar string : separator,
                           scalar string : objectLabel,
                           scalar string : authorization
                         )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  objectLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ListBuckets
        arguments   :  (path,BucketSet,BucketSize,BucketAuth,BucketDate,MaxKeys,OffSet,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_ListBucketsInSet(
                          scalar string : path,
                          scalar string : separator,
                          scalar integer : MaxKeys,
                          scalar integer : OffSet,
                          handle : BucketSet,
                          handle : BucketSize,
                          handle : BucketAuth,
                          handle : BucketDate
                        )

        DECLARATION SECTION 

          SET:
             identifier :  BucketSet
             property   :  Output ;

          PARAMETER:
             identifier :  MaxKeys
             default    :  -1
             property   :  Optional ;

          PARAMETER:
             identifier :  OffSet
             property   :  Optional ;

          PARAMETER:
             identifier :  BucketSize
             property   :  Output ;

          STRING PARAMETER:
             identifier :  BucketAuth
             property   :  Output ;

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  BucketDate
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ListObjects
        arguments   :  (path,ObjectSet,ObjectFileName,ObjectType,ObjectSize,BucketAuth,MaxKeys,OffSet,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_ListObjectsInSet(
                          scalar string : path,
                          scalar string : separator,
                          scalar integer : MaxKeys,
                          scalar integer : OffSet,
                          handle : ObjectSet,
                          handle : ObjectFileName,
                          handle : ObjectType,
                          handle : ObjectSize,
                          handle : BucketAuth
                        )

        DECLARATION SECTION 

          SET:
             identifier :  ObjectSet
             property   :  Output ;

          PARAMETER:
             identifier :  MaxKeys
             default    :  -1
             property   :  Optional ;

          PARAMETER:
             identifier :  OffSet
             property   :  Optional ;

          PARAMETER:
             identifier :  ObjectSize
             property   :  Output ;

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  ObjectFileName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  ObjectType
             property   :  Output ;

          STRING PARAMETER:
             identifier :  BucketAuth
             property   :  Output ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  ListVersions
        arguments   :  (path,objectLabel,VersionSet,VersionSize,BucketDate,MaxKeys,OffSet,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_ListVersionsInSet(
                          scalar string : path,
                          scalar string : separator,
                          scalar string : objectLabel,
                          scalar integer : MaxKeys,
                          scalar integer : OffSet,
                          handle : VersionSet,
                          handle : VersionSize,
                          handle : BucketDate
                        )

        DECLARATION SECTION 

          SET:
             identifier :  VersionSet
             property   :  Output ;

          PARAMETER:
             identifier :  MaxKeys
             default    :  -1
             property   :  Optional ;

          PARAMETER:
             identifier :  OffSet
             property   :  Optional ;

          PARAMETER:
             identifier :  VersionSize
             property   :  Output ;

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          STRING PARAMETER:
             identifier :  objectLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  BucketDate
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetBucketInfo
        arguments   :  (path,bucketLabel,numberOfObjects,authorization,dateCreated,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_GetBucketInfo(
                          scalar string  : path,
                          scalar string  : separator,
                          scalar string  : bucketLabel,
                          scalar integer : numberOfObjects,
                          handle  : authorization,
                          handle  : dateCreated
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          PARAMETER:
             identifier :  numberOfObjects
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  bucketLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  dateCreated
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetObjectInfo
        arguments   :  (path,objectLabel,objFileName,objFileType,numberOfVersions,authorization,lastVersionID,separator)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_GetObjectInfo(
                          scalar string : path,
                          scalar string : separator,
                          scalar string : objectLabel,
                          handle : objFileName,
                          handle : objFileType,
                          scalar integer : numberOfVersions,
                          handle : authorization,
                          handle : lastVersionID
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  path
             property   :  Input ;

          PARAMETER:
             identifier :  numberOfVersions
             property   :  Output ;

          STRING PARAMETER:
             identifier :  objectLabel
             property   :  Input ;

          STRING PARAMETER:
             identifier :  objFileName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  objFileType
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

          STRING PARAMETER:
             identifier :  separator
             default    :  "/"
             property   :  Optional ;

          STRING PARAMETER:
             identifier :  lastVersionID
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetVersionInfo
        arguments   :  (versionId,path,bucket,object,fileSize,dateCreated)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROS_GetVersionInfo(
                          scalar string : versionId,
                          handle : path,
                          handle : bucket,
                          handle : object,
                          scalar integer : fileSize,
                          handle  : dateCreated
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  versionId
             property   :  Input ;

          PARAMETER:
             identifier :  fileSize
             property   :  Output ;

          STRING PARAMETER:
             identifier :  bucket
             property   :  Output ;

          STRING PARAMETER:
             identifier :  object
             property   :  Output ;

          STRING PARAMETER:
             identifier :  path
             property   :  Output ;

          STRING PARAMETER:
             identifier :  dateCreated
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

    ENDMODULE PRO_Storage_Service ;

    MODULE PRO_Publishing_Service
        prefix     :  publishing


      EXTERNAL PROCEDURE
        identifier  :  PublishAimmsVersion
        arguments   :  (aimmsVersionID,aimmsVersionDescription,storedID,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_PublishAimmsVersion(
                          scalar string : aimmsVersionID,
                          scalar string : aimmsVersionDescription,
                          scalar string : storedID,
                          scalar string : authorization
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  aimmsVersionDescription
             property   :  Input ;

          STRING PARAMETER:
             identifier :  storedID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateAimmsVersionInfo
        arguments   :  (aimmsVersionID,aimmsVersionDescription,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_UpdateAimmsVersionInfo(
                          scalar string : aimmsVersionID,
                          scalar string : aimmsVersionDescription,
                          scalar string : authorization
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  aimmsVersionDescription
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetAimmsVersionInfo
        arguments   :  (aimmsVersionID,aimmsVersionDescription,storedID,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_GetAimmsVersionInfo(
                          scalar string : aimmsVersionID,
                          handle : aimmsVersionDescription,
                          handle : storedID,
                          handle : authorization
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  aimmsVersionDescription
             property   :  Output ;

          STRING PARAMETER:
             identifier :  storedID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DeleteAimmsVersion
        arguments   :  (aimmsVersionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_DeleteAimmsVersion(
                          scalar string : aimmsVersionID
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RetrieveAimmsVersionList
        arguments   :  (publishedAimmsVersion,aimmsDescription,aimmsStorageID,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_RetrieveAimmsVersionListInSet(
                          handle : publishedAimmsVersion,
                          handle : aimmsDescription,
                          handle : aimmsStorageID,
                          handle : authorization
                        )

        DECLARATION SECTION 

          SET:
             identifier :  publishedAimmsVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  aimmsDescription
             property   :  Output ;

          STRING PARAMETER:
             identifier :  aimmsStorageID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  PublishModel
        arguments   :  (modelID,modelVersion,modelDescription,aimmsVersionID,storedID,modelAttributes,authorization,
                         replaceOldVersion,replacedVersion)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_PublishModel(
                          scalar string : modelID,
                          scalar string : modelVersion,
                          scalar string : modelDescription,
                          scalar string : storedID,
                          scalar string : aimmsVersionID,
                          scalar string : modelAttributes,
                          scalar string : authorization,
                          scalar integer : replaceOldVersion,
                          scalar string : replacedVersion
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  modelID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelDescription
             property   :  Input ;

          STRING PARAMETER:
             identifier :  storedID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelAttributes
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

          PARAMETER:
             identifier :  replaceOldVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  replacedVersion
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  UpdateModelInfo
        arguments   :  (modelID,modelVersion,modelDescription,aimmsVersionID,modelAttributes,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_UpdateModelInfo(
                          scalar string : modelID,
                          scalar string : modelVersion,
                          scalar string : modelDescription,
                          scalar string : aimmsVersionID,
                          scalar string : modelAttributes,
                          scalar string : authorization
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  modelID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelDescription
             property   :  Input ;

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelVersion
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelAttributes
             property   :  Input ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetModelInfo
        arguments   :  (modelID,modelVersion,modelDescription,aimmsVersionID,attributes,storedID,existing,
                         authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_GetModelInfo(
                          scalar string : modelID,
                          scalar string : modelVersion,
                          handle : modelDescription,
                          handle : aimmsVersionID,
                          handle : attributes,
                          handle : storedID,
                          scalar integer : existing,
                          handle : authorization
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  modelID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelDescription
             property   :  Output ;

          STRING PARAMETER:
             identifier :  storedID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  modelVersion
             property   :  Input ;

          PARAMETER:
             identifier :  existing
             property   :  Output ;

          STRING PARAMETER:
             identifier :  attributes
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  DeleteModel
        arguments   :  (modelID,modelVersion)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_DeleteModel(
                          scalar string : modelID,
                          scalar string : modelVersion
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  modelID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  modelVersion
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  RetrieveModelList
        arguments   :  (publishedModel,modelName,modelVersion,modelDescription,aimmsVersion,fixedArguments,
                         storageVersion,existing,authorization)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_RetrieveModelListInSet(
                          handle : publishedModel,
                          handle : modelName,
                          handle : modelVersion,
                          handle : modelDescription,
                          handle : aimmsVersion,
                          handle : fixedArguments,
                          handle : storageVersion,
                          handle : existing,
                          handle : authorization
                        )

        DECLARATION SECTION 

          SET:
             identifier :  publishedModel
             property   :  Output ;

          STRING PARAMETER:
             identifier :  modelDescription
             property   :  Output ;

          STRING PARAMETER:
             identifier :  aimmsVersion
             property   :  Output ;

          PARAMETER:
             identifier :  existing
             property   :  Output ;

          STRING PARAMETER:
             identifier :  modelName
             property   :  Output ;

          STRING PARAMETER:
             identifier :  modelVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  storageVersion
             property   :  Output ;

          STRING PARAMETER:
             identifier :  fixedArguments
             property   :  Output ;

          STRING PARAMETER:
             identifier :  authorization
             property   :  Output ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  GetAimmsVersionPackManifestInfo
        arguments   :  (filePath,tempFolder,aimmsVersionID)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROP_GetAimmsVersionPackManifestInfo(
                          scalar string : filePath,
                          scalar string : tempFolder,
                          handle : aimmsVersionID
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  filePath
             property   :  Input ;

          STRING PARAMETER:
             identifier :  aimmsVersionID
             property   :  Output ;

          STRING PARAMETER:
             identifier :  tempFolder
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

    ENDMODULE PRO_Publishing_Service ;

    MODULE PRO_Client_Protocol
        prefix     :  client


      EXTERNAL PROCEDURE
        identifier  :  SendData
        arguments   :  (queueID,identifierHandle,flags)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_SendData(
                          scalar string : queueID,
                          handle : identifierHandle,
                          scalar integer : flags
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          HANDLE:
             identifier :  identifierHandle
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             range      :  integer
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SendDataAck
        arguments   :  (queueID,identifierHandle,flags,referenceNumber,callBackQueue)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_SendDataAck(
                          scalar string : queueID,
                          handle : identifierHandle,
                          scalar integer : flags,
                          scalar integer : referenceNumber,
                          scalar string : callBackQueue
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          HANDLE:
             identifier :  identifierHandle
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             range      :  integer
             property   :  Input ;

          PARAMETER:
             identifier :  referenceNumber
             property   :  Input ;

          STRING PARAMETER:
             identifier :  callBackQueue
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SendRunProcedure
        arguments   :  (queueID,procName,callerName,timeOut,flags)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_SendRunProcedure(
                          scalar string : queueID,
                          scalar string : procName,
                          scalar integer : timeOut,
                          scalar string : callerName,
                          scalar integer : flags
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  procName
             property   :  Input ;

          STRING PARAMETER:
             identifier :  callerName
             property   :  Input ;

          PARAMETER:
             identifier :  timeOut
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             range      :  integer
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  SendRunProcedureAck
        arguments   :  (queueID,procName,callerName,timeOut,flags,referenceNumber,callBackQueue)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_SendRunProcedureAck(
                          scalar string : queueID,
                          scalar string : procName,
                          scalar integer : timeOut,
                          scalar string : callerName,
                          scalar integer : flags,
                          scalar integer : referenceNumber,
                          scalar string : callBackQueue
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          STRING PARAMETER:
             identifier :  procName
             property   :  Input ;

          STRING PARAMETER:
             identifier :  callerName
             property   :  Input ;

          PARAMETER:
             identifier :  timeOut
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             range      :  integer
             property   :  Input ;

          PARAMETER:
             identifier :  referenceNumber
             property   :  Input ;

          STRING PARAMETER:
             identifier :  callBackQueue
             property   :  Input ;

        ENDSECTION  ;


      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  StopExecution
        arguments   :  (queueID,intType,flags)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_StopExecution(
                          scalar string : queueID,
                          scalar integer : intType,
                          scalar integer : flags
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          HANDLE:
             identifier :  identifierHandle
             property   :  Input ;

          PARAMETER:
             identifier :  intType
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             range      :  integer
             default    :  0
             property   :  Optional ;

        ENDSECTION  ;

        comment    :  "intType can be either AIMMSAPI_INTERRUPT_EXECUTE or AIMMSAPI_INTERRUPT_SOLVE"

      ENDPROCEDURE  ;

      EXTERNAL PROCEDURE
        identifier  :  StopExecutionAck
        arguments   :  (queueID,intType,referenceNumber,callBackQueue,flags)
        dll name    :  pro::ModelDLLPath
        return type :  integer
        body call   :  PROC_StopExecutionAck(
                          scalar string : queueID,
                          scalar integer : intType,
                          scalar integer : flags,
                          scalar integer : referenceNumber,
                          scalar string : callBackQueue
                        )

        DECLARATION SECTION 

          STRING PARAMETER:
             identifier :  queueID
             property   :  Input ;

          PARAMETER:
             identifier :  intType
             property   :  Input ;

          PARAMETER:
             identifier :  flags
             range      :  integer
             default    :  0
             property   :  Optional ;

          PARAMETER:
             identifier :  referenceNumber
             property   :  Input ;

          STRING PARAMETER:
             identifier :  callBackQueue
             property   :  Input ;

        ENDSECTION  ;

        comment    :  "intType can be either AIMMSAPI_INTERRUPT_EXECUTE or AIMMSAPI_INTERRUPT_SOLVE"

      ENDPROCEDURE  ;

    ENDMODULE PRO_Client_Protocol ;

  ENDSECTION DLL_Interface ;

  MODULE Case_Load_and_Save
      prefix     :  version
      public     :  data { ManagedSessionInputCaseType, ManagedSessionInputCaseIdentifierSet, ManagedSessionOutputCaseType,
                            ManagedSessionOutputCaseIdentifierSet, DetermineDataManagementStyle, IsNewDataManagementStyle }


    DECLARATION SECTION 

      STRING PARAMETER:
         identifier :  DataManagementStyle
         property   :  NoSave ;

      ELEMENT PARAMETER:
         identifier :  ManagedSessionInputCaseType
         range      :  AllCaseTypes
         property   :  NoSave ;

      SET:
         identifier :  ManagedSessionInputCaseIdentifierSet
         subset of  :  AllIdentifiers
         property   :  NoSave ;

      STRING PARAMETER:
         identifier :  ManagedSessionInputCaseName
         property   :  NoSave
         definition :  if (IsNewDataManagementStyle) then
                               "pro_input.data"
                       else
                               "pro_input.dat"
                       endif ;

      ELEMENT PARAMETER:
         identifier :  ManagedSessionOutputCaseType
         range      :  AllCaseTypes
         property   :  NoSave ;

      SET:
         identifier :  ManagedSessionOutputCaseIdentifierSet
         subset of  :  AllIdentifiers
         property   :  NoSave ;

      STRING PARAMETER:
         identifier :  ManagedSessionOutputCaseName
         property   :  NoSave
         definition :  if (IsNewDataManagementStyle) then
                               "pro_output.data"
                       else
                               "pro_output.dat"
                       endif ;

      PARAMETER:
         identifier :  IsNewDataManagementStyle
         property   :  NoSave ;

    ENDSECTION  ;

    PROCEDURE
      identifier :  DetermineDataManagementStyle
      body       :  
        if (not DataManagementStyle) then OptionGetString("Data_management_style", DataManagementStyle); endif;
        
        if (DataManagementStyle = "Disk Files and Folders") then
                IsNewDataManagementStyle := 1;
                if (card(ManagedSessionInputCaseIdentifierSet) = 0) then
                        ManagedSessionInputCaseIdentifierSet := AllIdentifiers;
                        ManagedSessionOutputCaseIdentifierSet := AllIdentifiers;
                endif;
        else
                IsNewDataManagementStyle := 0;
                if (not ManagedSessionInputCaseType) then
                        ManagedSessionInputCaseType := StringToElement(AllCaseTypes, "All Identifiers");
                        if (not ManagedSessionInputCaseType) then
                                ManagedSessionInputCaseType := first(AllCaseTypes);
                        endif;
                        ManagedSessionOutputCaseType := ManagedSessionInputCaseType;
                endif;
        endif;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  SaveInputCase
      arguments  :  (casefile)

      DECLARATION SECTION 

        STRING PARAMETER:
           identifier :  casefile
           property   :  Input ;

        ELEMENT PARAMETER:
           identifier :  SavedDefaultCaseType
           range      :  AllCaseTypes ;

        PARAMETER:
           identifier :  SavedDirtyState ;

        ELEMENT PARAMETER:
           identifier :  SavedCurrentCase
           range      :  AllCases ;

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
				if (card(ManagedSessionInputCaseIdentifierSet) = 0) then
					return 2;
				endif;
				retval := CaseFileSave(casefile, ManagedSessionInputCaseIdentifierSet);
        else
                if (not ManagedSessionInputCaseType) then
                    return 2;
                endif;
                
                SavedCurrentCase       := CurrentCase;
                SavedDirtyState        := CaseGetChangedStatus();
                
                if (SavedCurrentCase) then
                        CaseNew();
                endif;
                
                SavedDefaultCaseType   := CurrentDefaultCaseType;
                CurrentDefaultCaseType := ManagedSessionInputCaseType;
                
                retval := CaseWriteToSingleFile(casefile);
                
                CurrentDefaultCaseType := SavedDefaultCaseType;
                
                if (SavedCurrentCase) then
                        CaseSetCurrent(SavedCurrentCase);
                        CaseSetChangedStatus(SavedDirtyState);
                endif;
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  SaveOutputCase
      arguments  :  (casefile)

      DECLARATION SECTION 

        STRING PARAMETER:
           identifier :  casefile
           property   :  Input ;

        ELEMENT PARAMETER:
           identifier :  SavedDefaultCaseType
           range      :  AllCaseTypes ;

        PARAMETER:
           identifier :  SavedDirtyState ;

        ELEMENT PARAMETER:
           identifier :  SavedCurrentCase
           range      :  AllCases ;

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
				if (card(ManagedSessionOutputCaseIdentifierSet) = 0) then
					return 2;
				endif;
				retval := CaseFileSave(casefile, ManagedSessionOutputCaseIdentifierSet);
        else
                if (not ManagedSessionOutputCaseType) then
                    return 2;
                endif;
				
                SavedCurrentCase       := CurrentCase;
                SavedDirtyState        := CaseGetChangedStatus();
                
                if (SavedCurrentCase) then
                        CaseNew();
                endif;

                SavedDefaultCaseType   := CurrentDefaultCaseType;
                CurrentDefaultCaseType := ManagedSessionOutputCaseType;

                retval := CaseWriteToSingleFile(casefile);

                CurrentDefaultCaseType := SavedDefaultCaseType;

                if (SavedCurrentCase) then
                        CaseSetCurrent(SavedCurrentCase);
                        CaseSetChangedStatus(SavedDirtyState);
                endif;
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LoadCaseByFile
      arguments  :  (casefile)

      DECLARATION SECTION 

        STRING PARAMETER:
           identifier :  casefile
           property   :  Input ;

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                retval := CaseFileLoad(casefile);
        else
                retval := CaseReadFromSingleFile(casefile);
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  LoadCaseAsCurrent
      arguments  :  (casename)

      DECLARATION SECTION 

        ELEMENT PARAMETER:
           identifier :  casename
           range      :  AllCases
           property   :  Input ;

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                retval := CaseFileLoad(CaseFileURL(casename));
                CaseFileSetCurrent(CaseFileURL(casename));
        else
                retval := CaseLoadCurrent(casename,0);
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  GetCaseStatus

      DECLARATION SECTION 

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                retval := DataChangeMonitorHasChanged(DataManagementMonitorID);
        else
                retval := CaseGetChangedStatus();
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  ResetCaseStatus

      DECLARATION SECTION 

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                retval := DataChangeMonitorReset(DataManagementMonitorID, CurrentCaseFileContentType);
        else
                retval := CaseSetChangedStatus(0);
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  CaseFilePath
      arguments  :  (casename,filepath)

      DECLARATION SECTION 

        ELEMENT PARAMETER:
           identifier :  casename
           range      :  AllCases
           property   :  Input ;

        STRING PARAMETER:
           identifier :  filepath
           property   :  Output ;

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                filepath := CaseFileURL(casename);
                retval := 1;
        else
                retval := DataFileGetPath(casename,filepath);
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  FindCase
      arguments  :  (casepath,casename)

      DECLARATION SECTION 

        STRING PARAMETER:
           identifier :  casepath
           property   :  Input ;

        ELEMENT PARAMETER:
           identifier :  casename
           range      :  AllCases
           property   :  Output ;

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                retval := CaseFileURLtoElement(casepath, casename);
        else
                retval := CaseFind(casepath,casename);
        endif;
        
        return retval;

    ENDPROCEDURE  ;

    PROCEDURE
      identifier :  NewCase

      DECLARATION SECTION 

        PARAMETER:
           identifier :  retval ;

      ENDSECTION  ;

      body       :  
        if (IsNewDataManagementStyle) then
                retval := CaseFileSetCurrent("");
        else
                retval := CaseNew();
        endif;
        
        return retval;

    ENDPROCEDURE  ;

  ENDMODULE Case_Load_and_Save ;

ENDSECTION  ;
